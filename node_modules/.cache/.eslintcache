[{"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\index.tsx":"1","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\Providers.tsx":"2","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\App.tsx":"3","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\PageLoader.tsx":"4","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\style\\Global.tsx":"5","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\NotFound.tsx":"6","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Nft\\components\\NftGlobalNotification.tsx":"7","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\hooks.ts":"8","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\index.ts":"9","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\index.ts":"10","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\getRpcUrl.ts":"11","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\BlockContext.tsx":"12","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Menu\\index.tsx":"13","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\ThemeContext.tsx":"14","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\RefreshContext.tsx":"15","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\Localisation\\languageContext.tsx":"16","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Page.tsx":"17","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\index.ts":"18","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\actions.ts":"19","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\types.ts":"20","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\Home.tsx":"21","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\Farms.tsx":"22","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\addressHelpers.ts":"23","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Menu\\config.ts":"24","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\multicall.ts":"25","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useI18n.ts":"26","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\nfts.ts":"27","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Container.tsx":"28","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useRefresh.ts":"29","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\web3.ts":"30","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useTheme.ts":"31","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\Localisation\\translationsContext.ts":"32","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\localisation\\languageCodes.ts":"33","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\translateTextHelpers.ts":"34","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\Divider.tsx":"35","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx":"36","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\TotalValueLockedCard.tsx":"37","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeStats.tsx":"38","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\FarmStakingCard.tsx":"39","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\TwitterCard.tsx":"40","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\index.ts":"41","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\index.ts":"42","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\contracts.ts":"43","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Flex.tsx":"44","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx":"45","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\formatBalance.ts":"46","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useAllEarnings.ts":"47","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useTokenBalance.ts":"48","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeHarvestBalance.tsx":"49","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeWalletBalance.tsx":"50","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\fetchPoolsUser.ts":"51","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\fetchFarmUser.ts":"52","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\fetchFarms.ts":"53","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\fetchPools.ts":"54","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\index.ts":"55","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useFarmsWithBalance.ts":"56","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\UnlockButton.tsx":"57","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CardValue.tsx":"58","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\farms.ts":"59","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\pools.ts":"60","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx":"61","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx":"62","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx":"63","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx":"64","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\erc20.ts":"65","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useHarvest.ts":"66","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx":"67","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx":"68","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx":"69","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\index.ts":"70","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useContract.ts":"71","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ExpandableSectionButton\\index.ts":"72","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useApprove.ts":"73","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\getLiquidityUrlPathParts.ts":"74","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Tags.tsx":"75","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useStake.ts":"76","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\ifo.ts":"77","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\DepositModal.tsx":"78","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\WithdrawModal.tsx":"79","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\callHelpers.ts":"80","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx":"81","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\compoundApyHelpers.ts":"82","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useUnstake.ts":"83","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\TokenInput\\index.ts":"84","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ModalActions\\index.ts":"85","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\TokenInput\\TokenInput.tsx":"86","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ModalActions\\ModalActions.tsx":"87","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useWeb3.ts":"88","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Input\\index.ts":"89","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Spacer\\index.ts":"90","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Input\\Input.tsx":"91","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Spacer\\Spacer.tsx":"92"},{"size":278,"mtime":1621483368816,"results":"93","hashOfConfig":"94"},{"size":1393,"mtime":1621483368790,"results":"95","hashOfConfig":"94"},{"size":2729,"mtime":1621483368790,"results":"96","hashOfConfig":"94"},{"size":397,"mtime":1621483368796,"results":"97","hashOfConfig":"94"},{"size":595,"mtime":1621483368820,"results":"98","hashOfConfig":"94"},{"size":856,"mtime":1621483368861,"results":"99","hashOfConfig":"94"},{"size":2937,"mtime":1621483368855,"results":"100","hashOfConfig":"94"},{"size":3832,"mtime":1621496935282,"results":"101","hashOfConfig":"94"},{"size":34,"mtime":1621483368834,"results":"102","hashOfConfig":"94"},{"size":35,"mtime":1621483368830,"results":"103","hashOfConfig":"94"},{"size":329,"mtime":1621483368823,"results":"104","hashOfConfig":"94"},{"size":772,"mtime":1621483368809,"results":"105","hashOfConfig":"94"},{"size":1405,"mtime":1621494876284,"results":"106","hashOfConfig":"94"},{"size":938,"mtime":1621483368810,"results":"107","hashOfConfig":"94"},{"size":942,"mtime":1621483368810,"results":"108","hashOfConfig":"94"},{"size":3233,"mtime":1621483368809,"results":"109","hashOfConfig":"94"},{"size":426,"mtime":1621483368801,"results":"110","hashOfConfig":"94"},{"size":286,"mtime":1621483368819,"results":"111","hashOfConfig":"94"},{"size":265,"mtime":1621483368817,"results":"112","hashOfConfig":"94"},{"size":1799,"mtime":1621498686617,"results":"113","hashOfConfig":"94"},{"size":1998,"mtime":1621483368830,"results":"114","hashOfConfig":"94"},{"size":4714,"mtime":1621483368825,"results":"115","hashOfConfig":"94"},{"size":678,"mtime":1621484574764,"results":"116","hashOfConfig":"94"},{"size":2344,"mtime":1621494317632,"results":"117","hashOfConfig":"94"},{"size":964,"mtime":1621483368824,"results":"118","hashOfConfig":"94"},{"size":566,"mtime":1621483368813,"results":"119","hashOfConfig":"94"},{"size":2120,"mtime":1621483368807,"results":"120","hashOfConfig":"94"},{"size":320,"mtime":1621483368801,"results":"121","hashOfConfig":"94"},{"size":260,"mtime":1621483368814,"results":"122","hashOfConfig":"94"},{"size":770,"mtime":1621483368825,"results":"123","hashOfConfig":"94"},{"size":371,"mtime":1621483368814,"results":"124","hashOfConfig":"94"},{"size":404,"mtime":1621483368810,"results":"125","hashOfConfig":"94"},{"size":2053,"mtime":1621483368809,"results":"126","hashOfConfig":"94"},{"size":1614,"mtime":1621483368825,"results":"127","hashOfConfig":"94"},{"size":193,"mtime":1621483368826,"results":"128","hashOfConfig":"94"},{"size":6499,"mtime":1621483368828,"results":"129","hashOfConfig":"94"},{"size":1236,"mtime":1621496401124,"results":"130","hashOfConfig":"94"},{"size":2633,"mtime":1621499596341,"results":"131","hashOfConfig":"94"},{"size":3736,"mtime":1621499513224,"results":"132","hashOfConfig":"94"},{"size":1333,"mtime":1621499517980,"results":"133","hashOfConfig":"94"},{"size":3825,"mtime":1621483368820,"results":"134","hashOfConfig":"94"},{"size":2133,"mtime":1621483368818,"results":"135","hashOfConfig":"94"},{"size":677,"mtime":1621498315824,"results":"136","hashOfConfig":"94"},{"size":298,"mtime":1621483368801,"results":"137","hashOfConfig":"94"},{"size":1319,"mtime":1621483368829,"results":"138","hashOfConfig":"94"},{"size":525,"mtime":1621514807164,"results":"139","hashOfConfig":"94"},{"size":998,"mtime":1621483368811,"results":"140","hashOfConfig":"94"},{"size":2002,"mtime":1621483368815,"results":"141","hashOfConfig":"94"},{"size":676,"mtime":1621483368831,"results":"142","hashOfConfig":"94"},{"size":711,"mtime":1621499369757,"results":"143","hashOfConfig":"94"},{"size":3486,"mtime":1621483368819,"results":"144","hashOfConfig":"94"},{"size":2534,"mtime":1621483368817,"results":"145","hashOfConfig":"94"},{"size":7022,"mtime":1621499036286,"results":"146","hashOfConfig":"94"},{"size":2433,"mtime":1621483368819,"results":"147","hashOfConfig":"94"},{"size":295,"mtime":1621483368808,"results":"148","hashOfConfig":"94"},{"size":1336,"mtime":1621483368813,"results":"149","hashOfConfig":"94"},{"size":545,"mtime":1621483368800,"results":"150","hashOfConfig":"94"},{"size":871,"mtime":1621483368832,"results":"151","hashOfConfig":"94"},{"size":12691,"mtime":1621496486931,"results":"152","hashOfConfig":"94"},{"size":1243,"mtime":1621483368807,"results":"153","hashOfConfig":"94"},{"size":1051,"mtime":1621483368827,"results":"154","hashOfConfig":"94"},{"size":3322,"mtime":1621483368827,"results":"155","hashOfConfig":"94"},{"size":1336,"mtime":1621483368828,"results":"156","hashOfConfig":"94"},{"size":2231,"mtime":1621483368828,"results":"157","hashOfConfig":"94"},{"size":1105,"mtime":1621483368822,"results":"158","hashOfConfig":"94"},{"size":2055,"mtime":1621483368813,"results":"159","hashOfConfig":"94"},{"size":4735,"mtime":1621483368827,"results":"160","hashOfConfig":"94"},{"size":2044,"mtime":1621499513224,"results":"161","hashOfConfig":"94"},{"size":2151,"mtime":1621514207477,"results":"162","hashOfConfig":"94"},{"size":279,"mtime":1621483368807,"results":"163","hashOfConfig":"94"},{"size":2834,"mtime":1621483368812,"results":"164","hashOfConfig":"94"},{"size":53,"mtime":1621483368792,"results":"165","hashOfConfig":"94"},{"size":2535,"mtime":1621483368812,"results":"166","hashOfConfig":"94"},{"size":584,"mtime":1621483368823,"results":"167","hashOfConfig":"94"},{"size":819,"mtime":1621483368797,"results":"168","hashOfConfig":"94"},{"size":1819,"mtime":1621513936952,"results":"169","hashOfConfig":"94"},{"size":4693,"mtime":1621483368807,"results":"170","hashOfConfig":"94"},{"size":2035,"mtime":1621499205073,"results":"171","hashOfConfig":"94"},{"size":1910,"mtime":1621514293013,"results":"172","hashOfConfig":"94"},{"size":3640,"mtime":1621515165517,"results":"173","hashOfConfig":"94"},{"size":938,"mtime":1621483368792,"results":"174","hashOfConfig":"94"},{"size":1316,"mtime":1621483368821,"results":"175","hashOfConfig":"94"},{"size":2218,"mtime":1621514958467,"results":"176","hashOfConfig":"94"},{"size":40,"mtime":1621483368798,"results":"177","hashOfConfig":"94"},{"size":42,"mtime":1621483368796,"results":"178","hashOfConfig":"94"},{"size":2084,"mtime":1621483368798,"results":"179","hashOfConfig":"94"},{"size":797,"mtime":1621483368796,"results":"180","hashOfConfig":"94"},{"size":1023,"mtime":1621483368816,"results":"181","hashOfConfig":"94"},{"size":78,"mtime":1621483368794,"results":"182","hashOfConfig":"94"},{"size":36,"mtime":1621483368797,"results":"183","hashOfConfig":"94"},{"size":1164,"mtime":1621483368794,"results":"184","hashOfConfig":"94"},{"size":722,"mtime":1621483368797,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"llg6fu",{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\index.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\Providers.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\App.tsx",["388"],"import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/shops\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\PageLoader.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\style\\Global.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\NotFound.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Nft\\components\\NftGlobalNotification.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\hooks.ts",["389","390","391","392"],"import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 0; // HNY-BUSD LP\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const usePriceBeeBusd = (): BigNumber => {\r\n  const bnbPriceUSD = new BigNumber(usePriceBnbBusd())\r\n  const pid = 3\r\n  const farm = useFarmFromPid(pid);\r\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    console.log(\"PID: \".concat(farms[i].pid.toString()))\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n      console.log(\"VAL: \".concat(val))\r\n    }\r\n  }\r\n  return value;\r\n}","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\getRpcUrl.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\BlockContext.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Menu\\index.tsx",["393"],"import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd, usePriceBeeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\nimport { getCakeAddress, getBeeAddress } from '../../utils/addressHelpers'\r\n\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n  const beePriceUsd = usePriceBeeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      beePriceUsd={ beePriceUsd.toNumber() }\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      beePriceLink=\"https://www.coingecko.com/en/coins/tinville\"\r\n      priceLink={ \"https://poocoin.app/tokens/\".concat( getCakeAddress() ) }\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\ThemeContext.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\RefreshContext.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\Localisation\\languageContext.tsx",["394","395"],"import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error(\"ERROR\");\r\n          console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Page.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\actions.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\types.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\Home.tsx",["396"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'TINvS Finance')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Welcome to Tinville farms.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <TwitterCard/>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\Farms.tsx",["397","398"],"import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.TINVSPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(10002, 'Stake tokens to earn TINvS')\r\n            :\r\n          TranslateString(320, 'Stake LP tokens to earn TINvS')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback TINvS')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\addressHelpers.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Menu\\config.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\multicall.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useI18n.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\nfts.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Container.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useRefresh.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\web3.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useTheme.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\contexts\\Localisation\\translationsContext.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\localisation\\languageCodes.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\translateTextHelpers.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\Divider.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\FarmCard.tsx",["399"],"import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'TINvS'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'TINvS' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\TotalValueLockedCard.tsx",["400","401"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeStats.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\FarmStakingCard.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\TwitterCard.tsx",["402","403","404","405","406","407","408","409"],"import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'TheIndstryNtwrk'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"400\"\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\contracts.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\layout\\Flex.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmTabButtons\\index.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\formatBalance.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useAllEarnings.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useTokenBalance.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeHarvestBalance.tsx",["410","411"],"import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CakeWalletBalance.tsx",["412","413"],"import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\fetchPoolsUser.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\fetchFarmUser.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\farms\\fetchFarms.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\state\\pools\\fetchPools.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useFarmsWithBalance.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\UnlockButton.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Home\\components\\CardValue.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\farms.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\pools.ts",["414","415"],"import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\ApyButton.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\CardActionsContainer.tsx",["416"],"import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          TINvS\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\CardHeading.tsx",["417","418","419","420"],"import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\DetailsSection.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\erc20.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useHarvest.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\ApyCalculatorModal.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\HarvestAction.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\FarmCard\\StakeAction.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useContract.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ExpandableSectionButton\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useApprove.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\getLiquidityUrlPathParts.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Tags.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useStake.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\config\\constants\\ifo.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\DepositModal.tsx",["421","422"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport Balance from 'components/Balance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = getFullDisplayBalance(max, tokenName)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\views\\Farms\\components\\WithdrawModal.tsx",["423","424"],"import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  console.log(tokenName)\r\n  const fullBalance = getFullDisplayBalance(max, tokenName)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\callHelpers.ts",["425","426","427","428"],"import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account, decimals) => {\r\n  let dec = 18\r\n  if(pid === 5)\r\n    dec = 9\r\n  console.log(dec)\r\n  return masterChefContract.methods\r\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(dec)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStake = async (sousChefContract, amount, account, decimals) => {\r\n  return sousChefContract.methods\r\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account, decimals) => {\r\n  let dec = 18\r\n  if(pid === 5)\r\n    dec = 9\r\n    \r\n  console.log(dec)\r\n  return masterChefContract.methods\r\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(dec)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousUnstake = async (sousChefContract, amount, account, decimals) => {\r\n  // shit code: hard fix for old CTK and BLK\r\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\r\n    return sousChefContract.methods\r\n      .emergencyWithdraw()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  }\r\n  return sousChefContract.methods\r\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString())\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\r\n  return sousChefContract.methods\r\n    .emergencyWithdraw()\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvest = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit('0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const soushHarvestBnb = async (sousChefContract, account) => {\r\n  return sousChefContract.methods\r\n    .deposit()\r\n    .send({ from: account, value: new BigNumber(0) })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ExpandableSectionButton\\ExpandableSectionButton.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\utils\\compoundApyHelpers.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useUnstake.ts",["429","430"],"import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nlet decimals\r\nconst useUnstake = (pid: number) => {\r\n  decimals = 18\r\n  if(pid === 5)\r\n    decimals = 9\r\n  \r\n  console.log(pid)\r\n  console.log(decimals)\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimals)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId, dec) => {\r\n  decimals = dec\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account, decimals)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account, decimals)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n  decimals = 18  \r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\TokenInput\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ModalActions\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\TokenInput\\TokenInput.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\ModalActions\\ModalActions.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\hooks\\useWeb3.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Input\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Spacer\\index.ts",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Input\\Input.tsx",[],"C:\\Users\\kabam\\OneDrive\\Desktop\\NUI\\TINVS\\ttest-1-f\\src\\components\\Spacer\\Spacer.tsx",[],{"ruleId":"431","severity":1,"message":"432","line":2,"column":35,"nodeType":"433","messageId":"434","endLine":2,"endColumn":43},{"ruleId":"431","severity":1,"message":"435","line":2,"column":21,"nodeType":"433","messageId":"434","endLine":2,"endColumn":28},{"ruleId":"431","severity":1,"message":"436","line":5,"column":37,"nodeType":"433","messageId":"434","endLine":5,"endColumn":62},{"ruleId":"437","severity":1,"message":"438","line":101,"column":5,"nodeType":"439","messageId":"440","endLine":101,"endColumn":16},{"ruleId":"437","severity":1,"message":"438","line":112,"column":7,"nodeType":"439","messageId":"440","endLine":112,"endColumn":18},{"ruleId":"431","severity":1,"message":"441","line":9,"column":26,"nodeType":"433","messageId":"434","endLine":9,"endColumn":39},{"ruleId":"431","severity":1,"message":"442","line":33,"column":7,"nodeType":"433","messageId":"434","endLine":33,"endColumn":43},{"ruleId":"437","severity":1,"message":"438","line":60,"column":7,"nodeType":"439","messageId":"440","endLine":60,"endColumn":18},{"ruleId":"431","severity":1,"message":"443","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":19},{"ruleId":"431","severity":1,"message":"444","line":8,"column":27,"nodeType":"433","messageId":"434","endLine":8,"endColumn":41},{"ruleId":"431","severity":1,"message":"445","line":8,"column":43,"nodeType":"433","messageId":"434","endLine":8,"endColumn":56},{"ruleId":"431","severity":1,"message":"446","line":5,"column":10,"nodeType":"433","messageId":"434","endLine":5,"endColumn":24},{"ruleId":"431","severity":1,"message":"447","line":3,"column":35,"nodeType":"433","messageId":"434","endLine":3,"endColumn":43},{"ruleId":"431","severity":1,"message":"448","line":5,"column":10,"nodeType":"433","messageId":"434","endLine":5,"endColumn":21},{"ruleId":"431","severity":1,"message":"449","line":2,"column":35,"nodeType":"433","messageId":"434","endLine":2,"endColumn":39},{"ruleId":"431","severity":1,"message":"450","line":3,"column":8,"nodeType":"433","messageId":"434","endLine":3,"endColumn":17},{"ruleId":"431","severity":1,"message":"451","line":6,"column":10,"nodeType":"433","messageId":"434","endLine":6,"endColumn":24},{"ruleId":"431","severity":1,"message":"452","line":6,"column":26,"nodeType":"433","messageId":"434","endLine":6,"endColumn":42},{"ruleId":"431","severity":1,"message":"453","line":8,"column":10,"nodeType":"433","messageId":"434","endLine":8,"endColumn":24},{"ruleId":"431","severity":1,"message":"454","line":9,"column":8,"nodeType":"433","messageId":"434","endLine":9,"endColumn":17},{"ruleId":"431","severity":1,"message":"455","line":10,"column":10,"nodeType":"433","messageId":"434","endLine":10,"endColumn":18},{"ruleId":"431","severity":1,"message":"456","line":17,"column":7,"nodeType":"433","messageId":"434","endLine":17,"endColumn":10},{"ruleId":"431","severity":1,"message":"450","line":4,"column":8,"nodeType":"433","messageId":"434","endLine":4,"endColumn":17},{"ruleId":"431","severity":1,"message":"457","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":22},{"ruleId":"431","severity":1,"message":"458","line":4,"column":8,"nodeType":"433","messageId":"434","endLine":4,"endColumn":23},{"ruleId":"431","severity":1,"message":"453","line":6,"column":10,"nodeType":"433","messageId":"434","endLine":6,"endColumn":24},{"ruleId":"431","severity":1,"message":"459","line":1,"column":22,"nodeType":"433","messageId":"434","endLine":1,"endColumn":32},{"ruleId":"431","severity":1,"message":"460","line":1,"column":34,"nodeType":"433","messageId":"434","endLine":1,"endColumn":46},{"ruleId":"431","severity":1,"message":"461","line":8,"column":26,"nodeType":"433","messageId":"434","endLine":8,"endColumn":43},{"ruleId":"431","severity":1,"message":"462","line":4,"column":10,"nodeType":"433","messageId":"434","endLine":4,"endColumn":22},{"ruleId":"431","severity":1,"message":"463","line":4,"column":24,"nodeType":"433","messageId":"434","endLine":4,"endColumn":31},{"ruleId":"431","severity":1,"message":"464","line":4,"column":43,"nodeType":"433","messageId":"434","endLine":4,"endColumn":50},{"ruleId":"431","severity":1,"message":"465","line":28,"column":3,"nodeType":"433","messageId":"434","endLine":28,"endColumn":7},{"ruleId":"431","severity":1,"message":"435","line":2,"column":30,"nodeType":"433","messageId":"434","endLine":2,"endColumn":37},{"ruleId":"431","severity":1,"message":"466","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":15},{"ruleId":"431","severity":1,"message":"435","line":2,"column":30,"nodeType":"433","messageId":"434","endLine":2,"endColumn":37},{"ruleId":"437","severity":1,"message":"438","line":20,"column":3,"nodeType":"439","messageId":"440","endLine":20,"endColumn":14},{"ruleId":"431","severity":1,"message":"467","line":10,"column":71,"nodeType":"433","messageId":"434","endLine":10,"endColumn":79},{"ruleId":"437","severity":1,"message":"438","line":14,"column":3,"nodeType":"439","messageId":"440","endLine":14,"endColumn":14},{"ruleId":"431","severity":1,"message":"467","line":41,"column":73,"nodeType":"433","messageId":"434","endLine":41,"endColumn":81},{"ruleId":"437","severity":1,"message":"438","line":46,"column":3,"nodeType":"439","messageId":"440","endLine":46,"endColumn":14},{"ruleId":"437","severity":1,"message":"438","line":19,"column":3,"nodeType":"439","messageId":"440","endLine":19,"endColumn":14},{"ruleId":"437","severity":1,"message":"438","line":20,"column":3,"nodeType":"439","messageId":"440","endLine":20,"endColumn":14},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useMemo' is defined but never used.","'fetchPoolsPublicDataAsync' is defined but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'getBeeAddress' is defined but never used.","'fetchTranslationsForSelectedLanguage' is assigned a value but never used.","'LotteryCard' is defined but never used.","'CAKE_PER_BLOCK' is defined but never used.","'CAKE_POOL_PID' is defined but never used.","'communityFarms' is defined but never used.","'Skeleton' is defined but never used.","'useGetStats' is defined but never used.","'Text' is defined but never used.","'BigNumber' is defined but never used.","'useTotalSupply' is defined but never used.","'useBurnedBalance' is defined but never used.","'getCakeAddress' is defined but never used.","'CardValue' is defined but never used.","'useFarms' is defined but never used.","'Row' is assigned a value but never used.","'useAllEarnings' is defined but never used.","'useTokenBalance' is defined but never used.","'QuoteToken' is defined but never used.","'PoolCategory' is defined but never used.","'useFarmFromSymbol' is defined but never used.","'CommunityTag' is defined but never used.","'CoreTag' is defined but never used.","'RiskTag' is defined but never used.","'risk' is defined but never used.","'Balance' is defined but never used.","'decimals' is defined but never used."]