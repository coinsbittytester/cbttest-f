{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\nlet decimals;\n\nconst useUnstake = pid => {\n  _s();\n\n  decimals = 18;\n  if (pid === 5) decimals = 9;\n  console.log(pid);\n  console.log(decimals);\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account, decimals);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"zJOfsUBwQjUSBQmKcK0zWz87/wI=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23];\nexport const useSousUnstake = (sousId, dec) => {\n  _s2();\n\n  decimals = dec;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const isOldSyrup = SYRUPIDS.includes(sousId);\n  const handleUnstake = useCallback(async amount => {\n    if (sousId === 0) {\n      const txHash = await unstake(masterChefContract, 0, amount, account, decimals);\n      console.info(txHash);\n    } else if (isOldSyrup) {\n      const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    } else {\n      const txHash = await sousUnstake(sousChefContract, amount, account, decimals);\n      console.info(txHash);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward(sousId, account));\n  }, [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId]);\n  decimals = 18;\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useSousUnstake, \"/h5ZFjuO6oTkFAGCCGKqpSiwlYo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef, useSousChef];\n});\n\nexport default useUnstake;","map":{"version":3,"sources":["C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstake","sousUnstake","sousEmegencyUnstake","useMasterchef","useSousChef","decimals","useUnstake","pid","console","log","dispatch","account","masterChefContract","handleUnstake","amount","txHash","info","onUnstake","SYRUPIDS","useSousUnstake","sousId","dec","sousChefContract","isOldSyrup","includes"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nlet decimals\r\nconst useUnstake = (pid: number) => {\r\n  decimals = 18\r\n  if(pid === 5)\r\n    decimals = 9\r\n  \r\n  console.log(pid)\r\n  console.log(decimals)\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account, decimals)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId, dec) => {\r\n  decimals = dec\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account, decimals)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account, decimals)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n  decimals = 18  \r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n"]},"metadata":{},"sourceType":"module"}