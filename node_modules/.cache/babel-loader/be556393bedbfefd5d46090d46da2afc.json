{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\nlet decimals = 18;\n\nconst useStake = pid => {\n  _s();\n\n  decimals = 18;\n  if (pid === 5) decimals = 9;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account, decimals);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSousStake = (sousId, isUsingBnb, dec) => {\n  _s2();\n\n  decimals = dec;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleStake = useCallback(async amount => {\n    if (sousId === 0) {\n      await stake(masterChefContract, 0, amount, account, decimals);\n    } else if (isUsingBnb) {\n      await sousStakeBnb(sousChefContract, amount, account);\n    } else {\n      await sousStake(sousChefContract, amount, account, decimals);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  decimals = 18;\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useSousStake, \"0xUdHG0RnkeJZ8uhNJRSEh5OE7M=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef, useSousChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","sousStake","sousStakeBnb","useMasterchef","useSousChef","decimals","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSousStake","sousId","isUsingBnb","dec","sousChefContract"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,EAA0DC,iBAA1D,QAAmF,eAAnF;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,YAA3B,QAA+C,mBAA/C;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;AAEA,IAAIC,QAAQ,GAAG,EAAf;;AACA,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;AAAA;;AAChCF,EAAAA,QAAQ,GAAG,EAAX;AACA,MAAGE,GAAG,KAAK,CAAX,EACEF,QAAQ,GAAG,CAAX;AACF,QAAMG,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcd,SAAS,EAA7B;AACA,QAAMe,kBAAkB,GAAGP,aAAa,EAAxC;AAEA,QAAMQ,WAAW,GAAGjB,WAAW,CAC7B,MAAOkB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMb,KAAK,CAACU,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,EAA2CJ,QAA3C,CAA1B;AACAG,IAAAA,QAAQ,CAACX,sBAAsB,CAACY,OAAD,CAAvB,CAAR;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAL4B,EAM7B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN6B,CAA/B;AASA,SAAO;AAAES,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAlBD;;GAAML,Q;UAIaV,W,EACGD,S,EACOQ,a;;;AAc7B,OAAO,MAAMc,YAAY,GAAG,CAACC,MAAD,EAASC,UAAT,EAAqBC,GAArB,KAA6B;AAAA;;AACvDf,EAAAA,QAAQ,GAAGe,GAAX;AACA,QAAMZ,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAcd,SAAS,EAA7B;AACA,QAAMe,kBAAkB,GAAGP,aAAa,EAAxC;AACA,QAAMkB,gBAAgB,GAAGjB,WAAW,CAACc,MAAD,CAApC;AAEA,QAAMP,WAAW,GAAGjB,WAAW,CAC7B,MAAOkB,MAAP,IAA0B;AACxB,QAAIM,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMlB,KAAK,CAACU,kBAAD,EAAqB,CAArB,EAAwBE,MAAxB,EAAgCH,OAAhC,EAAyCJ,QAAzC,CAAX;AACD,KAFD,MAEO,IAAIc,UAAJ,EAAgB;AACrB,YAAMjB,YAAY,CAACmB,gBAAD,EAAmBT,MAAnB,EAA2BH,OAA3B,CAAlB;AACD,KAFM,MAEA;AACL,YAAMR,SAAS,CAACoB,gBAAD,EAAmBT,MAAnB,EAA2BH,OAA3B,EAAoCJ,QAApC,CAAf;AACD;;AACDG,IAAAA,QAAQ,CAACV,uBAAuB,CAACoB,MAAD,EAAST,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACT,iBAAiB,CAACmB,MAAD,EAAST,OAAT,CAAlB,CAAR;AACD,GAX4B,EAY7B,CAACA,OAAD,EAAUD,QAAV,EAAoBW,UAApB,EAAgCT,kBAAhC,EAAoDW,gBAApD,EAAsEH,MAAtE,CAZ6B,CAA/B;AAcAb,EAAAA,QAAQ,GAAG,EAAX;AACA,SAAO;AAAEW,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAvBM;;IAAMM,Y;UAEMrB,W,EACGD,S,EACOQ,a,EACFC,W;;;AAoB3B,eAAeE,QAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nlet decimals = 18\r\nconst useStake = (pid: number) => {\r\n  decimals = 18\r\n  if(pid === 5)\r\n    decimals = 9\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account, decimals)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb, dec) => {\r\n  decimals = dec\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account, decimals)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account, decimals)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n  decimals = 18\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake"]},"metadata":{},"sourceType":"module"}