{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import erc20 from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import{getMasterChefAddress}from'utils/addressHelpers';import farmsConfig from'config/constants/farms';import{QuoteToken}from'../../config/constants/types';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;var fetchFarms=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all(farmsConfig.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig){var lpAdress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBlanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,tokenAltBalanceLP,quoteAltTokenBlanceLP,lpQuote,calls2,_yield$multicall3,_yield$multicall4,alt1,alt2,tokenAmount,lpTotalInQuoteToken,tokenPriceVsQuote,lpTokenRatio,quoteTokenAmount,_lpTokenRatio,_quoteTokenAmount,_yield$multicall5,_yield$multicall6,info,totalAllocPoint,TINVSPerBlock,allocPoint,poolWeight;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lpAdress=farmConfig.lpAddresses[CHAIN_ID];calls=[// Balance of token in the LP contract\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'balanceOf',params:[lpAdress]},// Balance of quote token on LP contract\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'balanceOf',params:[lpAdress]},// Balance of LP tokens in the master chef contract\n{address:farmConfig.isTokenOnly?farmConfig.tokenAddresses[CHAIN_ID]:lpAdress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAdress,name:'totalSupply'},// Token decimals\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'decimals'},// Quote token decimals\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'decimals'}];_context.next=4;return multicall(erc20,calls);case 4:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,6);tokenBalanceLP=_yield$multicall2[0];quoteTokenBlanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];lpTotalSupply=_yield$multicall2[3];tokenDecimals=_yield$multicall2[4];quoteTokenDecimals=_yield$multicall2[5];if(!farmConfig.nonStandard){_context.next=23;break;}lpQuote=farmConfig.lpAddresses[97];calls2=[// Balance of token in the LP contract\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'balanceOf',params:[lpQuote]},// Balance of quote token on LP contract\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'balanceOf',params:[lpQuote]}];_context.next=17;return multicall(erc20,calls2);case 17:_yield$multicall3=_context.sent;_yield$multicall4=_slicedToArray(_yield$multicall3,2);alt1=_yield$multicall4[0];alt2=_yield$multicall4[1];tokenAltBalanceLP=alt1;quoteAltTokenBlanceLP=alt2;case 23:if(farmConfig.isTokenOnly&&farmConfig.nonStandard){tokenAmount=new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));if(farmConfig.tokenSymbol===QuoteToken.BUSD&&farmConfig.quoteTokenSymbol===QuoteToken.BUSD){tokenPriceVsQuote=new BigNumber(1);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}lpTotalInQuoteToken=tokenAmount.times(tokenPriceVsQuote);}else if(farmConfig.isTokenOnly){tokenAmount=new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));if(farmConfig.tokenSymbol===QuoteToken.BUSD&&farmConfig.quoteTokenSymbol===QuoteToken.BUSD){tokenPriceVsQuote=new BigNumber(1);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}lpTotalInQuoteToken=tokenAmount.times(tokenPriceVsQuote);}else if(farmConfig.nonStandard){// Ratio in % a LP tokens that are in staking, vs the total number in circulation\nlpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Total value in staking in quote token value\nlpTotalInQuoteToken=new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2)).times(lpTokenRatio);// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\ntokenAmount=new BigNumber(tokenAltBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);quoteTokenAmount=new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);if(tokenAmount.comparedTo(0)>0){tokenPriceVsQuote=quoteTokenAmount.div(tokenAmount);}else{tokenPriceVsQuote=new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(tokenAltBalanceLP));}}else{// Ratio in % a LP tokens that are in staking, vs the total number in circulation\n_lpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Total value in staking in quote token value\nlpTotalInQuoteToken=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2)).times(_lpTokenRatio);// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\ntokenAmount=new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(_lpTokenRatio);_quoteTokenAmount=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(_lpTokenRatio);if(tokenAmount.comparedTo(0)>0){tokenPriceVsQuote=_quoteTokenAmount.div(tokenAmount);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}}_context.next=26;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[farmConfig.pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'},{address:getMasterChefAddress(),name:'TINVSPerBlock'}]);case 26:_yield$multicall5=_context.sent;_yield$multicall6=_slicedToArray(_yield$multicall5,3);info=_yield$multicall6[0];totalAllocPoint=_yield$multicall6[1];TINVSPerBlock=_yield$multicall6[2];allocPoint=new BigNumber(info.allocPoint._hex);poolWeight=allocPoint.div(new BigNumber(totalAllocPoint));return _context.abrupt(\"return\",_objectSpread(_objectSpread({},farmConfig),{},{tokenAmount:tokenAmount.toJSON(),// quoteTokenAmount: quoteTokenAmount,\nlpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:tokenPriceVsQuote.toJSON(),poolWeight:poolWeight.toNumber(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\"),depositFeeBP:info.depositFeeBP,TINVSPerBlock:new BigNumber(TINVSPerBlock).toNumber()}));case 34:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()));case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarms(){return _ref.apply(this,arguments);};}();export default fetchFarms;","map":{"version":3,"sources":["C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","nonStandard","lpQuote","calls2","alt1","alt2","tokenAltBalanceLP","quoteAltTokenBlanceLP","tokenAmount","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","pid","info","totalAllocPoint","TINVSPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAltBalanceLP\r\n      let quoteAltTokenBlanceLP\r\n\r\n      if(farmConfig.nonStandard){\r\n        const lpQuote = farmConfig.lpAddresses[97]\r\n        const calls2 = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n        ]\r\n\r\n        const [\r\n          alt1,\r\n          alt2,\r\n        ] = await multicall(erc20, calls2)\r\n\r\n        tokenAltBalanceLP = alt1\r\n        quoteAltTokenBlanceLP = alt2\r\n      }\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n\r\n      if(farmConfig.isTokenOnly && farmConfig.nonStandard){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.isTokenOnly){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.nonStandard){\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenAltBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(tokenAltBalanceLP));\r\n        }\r\n\r\n      }else{\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        \r\n      }\r\n\r\n      const [info, totalAllocPoint, TINVSPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'TINVSPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        TINVSPerBlock: new BigNumber(TINVSPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}