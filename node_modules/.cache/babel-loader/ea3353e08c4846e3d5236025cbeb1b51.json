{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAltBalanceLP;\n    let quoteAltTokenBlanceLP;\n\n    if (farmConfig.nonStandard) {\n      const lpQuote = farmConfig.lpAddresses[97];\n      const calls2 = [// Balance of token in the LP contract\n      {\n        address: farmConfig.tokenAddresses[CHAIN_ID],\n        name: 'balanceOf',\n        params: [lpQuote]\n      }, // Balance of quote token on LP contract\n      {\n        address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n        name: 'balanceOf',\n        params: [lpQuote]\n      }];\n      const [alt1, alt2] = await multicall(erc20, calls2);\n      tokenAltBalanceLP = alt1;\n      quoteAltTokenBlanceLP = alt2;\n    }\n\n    let tokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n\n    if (farmConfig.isTokenOnly && farmConfig.nonStandard) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\n\n      if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else if (farmConfig.isTokenOnly) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\n\n      if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else if (farmConfig.nonStandard) {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n      lpTotalInQuoteToken = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenAltBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(tokenAltBalanceLP));\n      }\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n      lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n    }\n\n    const [info, totalAllocPoint, TINVSPerBlock] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChefAddress(),\n      name: 'TINVSPerBlock'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      // quoteTokenAmount: quoteTokenAmount,\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      TINVSPerBlock: new BigNumber(TINVSPerBlock).toNumber()\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["C:/Users/kabam/OneDrive/Desktop/NUI/TINVS/ttest-1-f/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","data","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAltBalanceLP","quoteAltTokenBlanceLP","nonStandard","lpQuote","calls2","alt1","alt2","tokenAmount","lpTotalInQuoteToken","tokenPriceVsQuote","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","times","lpTokenRatio","quoteTokenAmount","comparedTo","info","totalAllocPoint","TINVSPerBlock","pid","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBT,WAAW,CAACU,GAAZ,CAAgB,MAAOC,UAAP,IAAsB;AACpC,UAAMC,QAAQ,GAAGD,UAAU,CAACE,WAAX,CAAuBX,QAAvB,CAAjB;AACA,UAAMY,KAAK,GAAG,CACZ;AACA;AACEC,MAAAA,OAAO,EAAEJ,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CADX;AAEEe,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACN,QAAD;AAHV,KAFY,EAOZ;AACA;AACEG,MAAAA,OAAO,EAAEJ,UAAU,CAACQ,kBAAX,CAA8BjB,QAA9B,CADX;AAEEe,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACN,QAAD;AAHV,KARY,EAaZ;AACA;AACEG,MAAAA,OAAO,EAAEJ,UAAU,CAACS,WAAX,GAAyBT,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CAAzB,GAA+DU,QAD1E;AAEEK,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACnB,oBAAoB,EAArB;AAHV,KAdY,EAmBZ;AACA;AACEgB,MAAAA,OAAO,EAAEH,QADX;AAEEK,MAAAA,IAAI,EAAE;AAFR,KApBY,EAwBZ;AACA;AACEF,MAAAA,OAAO,EAAEJ,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CADX;AAEEe,MAAAA,IAAI,EAAE;AAFR,KAzBY,EA6BZ;AACA;AACEF,MAAAA,OAAO,EAAEJ,UAAU,CAACQ,kBAAX,CAA8BjB,QAA9B,CADX;AAEEe,MAAAA,IAAI,EAAE;AAFR,KA9BY,CAAd;AAoCA,UAAM,CACJI,cADI,EAEJC,kBAFI,EAGJC,gBAHI,EAIJC,aAJI,EAKJC,aALI,EAMJC,kBANI,IAOF,MAAM5B,SAAS,CAACF,KAAD,EAAQkB,KAAR,CAPnB;AASA,QAAIa,iBAAJ;AACA,QAAIC,qBAAJ;;AAEA,QAAGjB,UAAU,CAACkB,WAAd,EAA0B;AACxB,YAAMC,OAAO,GAAGnB,UAAU,CAACE,WAAX,CAAuB,EAAvB,CAAhB;AACA,YAAMkB,MAAM,GAAG,CACb;AACA;AACEhB,QAAAA,OAAO,EAAEJ,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CADX;AAEEe,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,MAAM,EAAE,CAACY,OAAD;AAHV,OAFa,EAOb;AACA;AACEf,QAAAA,OAAO,EAAEJ,UAAU,CAACQ,kBAAX,CAA8BjB,QAA9B,CADX;AAEEe,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,MAAM,EAAE,CAACY,OAAD;AAHV,OARa,CAAf;AAeA,YAAM,CACJE,IADI,EAEJC,IAFI,IAGF,MAAMnC,SAAS,CAACF,KAAD,EAAQmC,MAAR,CAHnB;AAKAJ,MAAAA,iBAAiB,GAAGK,IAApB;AACAJ,MAAAA,qBAAqB,GAAGK,IAAxB;AACD;;AAED,QAAIC,WAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,iBAAJ;;AAEA,QAAGzB,UAAU,CAACS,WAAX,IAA0BT,UAAU,CAACkB,WAAxC,EAAoD;AAElDK,MAAAA,WAAW,GAAG,IAAIvC,SAAJ,CAAc4B,gBAAd,EAAgCc,GAAhC,CAAoC,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsB,EAAtB,CAApC,CAAd;;AACA,UAAG3B,UAAU,CAAC4B,WAAX,KAA2BtC,UAAU,CAACuC,IAAtC,IAA8C7B,UAAU,CAAC8B,gBAAX,KAAgCxC,UAAU,CAACuC,IAA5F,EAAiG;AAC/FJ,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAc,CAAd,CAApB;AACD,OAFD,MAEK;AACHyC,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAc2B,kBAAd,EAAkCe,GAAlC,CAAsC,IAAI1C,SAAJ,CAAc0B,cAAd,CAAtC,CAApB;AACD;;AACDc,MAAAA,mBAAmB,GAAGD,WAAW,CAACQ,KAAZ,CAAkBN,iBAAlB,CAAtB;AAED,KAVD,MAUM,IAAGzB,UAAU,CAACS,WAAd,EAA0B;AAE9Bc,MAAAA,WAAW,GAAG,IAAIvC,SAAJ,CAAc4B,gBAAd,EAAgCc,GAAhC,CAAoC,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsB,EAAtB,CAApC,CAAd;;AACA,UAAG3B,UAAU,CAAC4B,WAAX,KAA2BtC,UAAU,CAACuC,IAAtC,IAA8C7B,UAAU,CAAC8B,gBAAX,KAAgCxC,UAAU,CAACuC,IAA5F,EAAiG;AAC/FJ,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAc,CAAd,CAApB;AACD,OAFD,MAEK;AACHyC,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAc2B,kBAAd,EAAkCe,GAAlC,CAAsC,IAAI1C,SAAJ,CAAc0B,cAAd,CAAtC,CAApB;AACD;;AACDc,MAAAA,mBAAmB,GAAGD,WAAW,CAACQ,KAAZ,CAAkBN,iBAAlB,CAAtB;AAED,KAVK,MAUA,IAAGzB,UAAU,CAACkB,WAAd,EAA0B;AAE9B;AACA,YAAMc,YAAY,GAAG,IAAIhD,SAAJ,CAAc4B,gBAAd,EAAgCc,GAAhC,CAAoC,IAAI1C,SAAJ,CAAc6B,aAAd,CAApC,CAArB,CAH8B,CAK9B;;AACAW,MAAAA,mBAAmB,GAAG,IAAIxC,SAAJ,CAAciC,qBAAd,EACnBS,GADmB,CACf,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBZ,kBAAtB,CADe,EAEnBgB,KAFmB,CAEb,IAAI/C,SAAJ,CAAc,CAAd,CAFa,EAGnB+C,KAHmB,CAGbC,YAHa,CAAtB,CAN8B,CAW9B;;AACAT,MAAAA,WAAW,GAAG,IAAIvC,SAAJ,CAAcgC,iBAAd,EAAiCU,GAAjC,CAAqC,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBb,aAAtB,CAArC,EAA2EiB,KAA3E,CAAiFC,YAAjF,CAAd;AACA,YAAMC,gBAAgB,GAAG,IAAIjD,SAAJ,CAAciC,qBAAd,EACtBS,GADsB,CAClB,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBZ,kBAAtB,CADkB,EAEtBgB,KAFsB,CAEhBC,YAFgB,CAAzB;;AAIA,UAAGT,WAAW,CAACW,UAAZ,CAAuB,CAAvB,IAA4B,CAA/B,EAAiC;AAC/BT,QAAAA,iBAAiB,GAAGQ,gBAAgB,CAACP,GAAjB,CAAqBH,WAArB,CAApB;AACD,OAFD,MAEK;AACHE,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAciC,qBAAd,EAAqCS,GAArC,CAAyC,IAAI1C,SAAJ,CAAcgC,iBAAd,CAAzC,CAApB;AACD;AAEF,KAvBK,MAuBD;AAEH;AACA,YAAMgB,YAAY,GAAG,IAAIhD,SAAJ,CAAc4B,gBAAd,EAAgCc,GAAhC,CAAoC,IAAI1C,SAAJ,CAAc6B,aAAd,CAApC,CAArB,CAHG,CAKH;;AACAW,MAAAA,mBAAmB,GAAG,IAAIxC,SAAJ,CAAc2B,kBAAd,EACnBe,GADmB,CACf,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBZ,kBAAtB,CADe,EAEnBgB,KAFmB,CAEb,IAAI/C,SAAJ,CAAc,CAAd,CAFa,EAGnB+C,KAHmB,CAGbC,YAHa,CAAtB,CANG,CAWH;;AACAT,MAAAA,WAAW,GAAG,IAAIvC,SAAJ,CAAc0B,cAAd,EAA8BgB,GAA9B,CAAkC,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBb,aAAtB,CAAlC,EAAwEiB,KAAxE,CAA8EC,YAA9E,CAAd;AACA,YAAMC,gBAAgB,GAAG,IAAIjD,SAAJ,CAAc2B,kBAAd,EACtBe,GADsB,CAClB,IAAI1C,SAAJ,CAAc,EAAd,EAAkB2C,GAAlB,CAAsBZ,kBAAtB,CADkB,EAEtBgB,KAFsB,CAEhBC,YAFgB,CAAzB;;AAIA,UAAGT,WAAW,CAACW,UAAZ,CAAuB,CAAvB,IAA4B,CAA/B,EAAiC;AAC/BT,QAAAA,iBAAiB,GAAGQ,gBAAgB,CAACP,GAAjB,CAAqBH,WAArB,CAApB;AACD,OAFD,MAEK;AACHE,QAAAA,iBAAiB,GAAG,IAAIzC,SAAJ,CAAc2B,kBAAd,EAAkCe,GAAlC,CAAsC,IAAI1C,SAAJ,CAAc0B,cAAd,CAAtC,CAApB;AACD;AAEF;;AAED,UAAM,CAACyB,IAAD,EAAOC,eAAP,EAAwBC,aAAxB,IAAyC,MAAMlD,SAAS,CAACD,aAAD,EAAgB,CAC5E;AACEkB,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,MAAM,EAAE,CAACP,UAAU,CAACsC,GAAZ;AAHV,KAD4E,EAM5E;AACElC,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE;AAFR,KAN4E,EAU5E;AACEF,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE;AAFR,KAV4E,CAAhB,CAA9D;AAgBA,UAAMiC,UAAU,GAAG,IAAIvD,SAAJ,CAAcmD,IAAI,CAACI,UAAL,CAAgBC,IAA9B,CAAnB;AACA,UAAMC,UAAU,GAAGF,UAAU,CAACb,GAAX,CAAe,IAAI1C,SAAJ,CAAcoD,eAAd,CAAf,CAAnB;AAEA,WAAO,EACL,GAAGpC,UADE;AAELuB,MAAAA,WAAW,EAAEA,WAAW,CAACmB,MAAZ,EAFR;AAGL;AACAlB,MAAAA,mBAAmB,EAAEA,mBAAmB,CAACkB,MAApB,EAJhB;AAKLjB,MAAAA,iBAAiB,EAAEA,iBAAiB,CAACiB,MAAlB,EALd;AAMLD,MAAAA,UAAU,EAAEA,UAAU,CAACE,QAAX,EANP;AAOLC,MAAAA,UAAU,EAAG,GAAEL,UAAU,CAACb,GAAX,CAAe,GAAf,EAAoBmB,QAApB,EAA+B,GAPzC;AAQLC,MAAAA,YAAY,EAAEX,IAAI,CAACW,YARd;AASLT,MAAAA,aAAa,EAAE,IAAIrD,SAAJ,CAAcqD,aAAd,EAA6BM,QAA7B;AATV,KAAP;AAWD,GAlLD,CADiB,CAAnB;AAqLA,SAAO/C,IAAP;AACD,CAvLD;;AAyLA,eAAeD,UAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n      let tokenAltBalanceLP\r\n      let quoteAltTokenBlanceLP\r\n\r\n      if(farmConfig.nonStandard){\r\n        const lpQuote = farmConfig.lpAddresses[97]\r\n        const calls2 = [\r\n          // Balance of token in the LP contract\r\n          {\r\n            address: farmConfig.tokenAddresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n          // Balance of quote token on LP contract\r\n          {\r\n            address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n            name: 'balanceOf',\r\n            params: [lpQuote],\r\n          },\r\n        ]\r\n\r\n        const [\r\n          alt1,\r\n          alt2,\r\n        ] = await multicall(erc20, calls2)\r\n\r\n        tokenAltBalanceLP = alt1\r\n        quoteAltTokenBlanceLP = alt2\r\n      }\r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n\r\n      if(farmConfig.isTokenOnly && farmConfig.nonStandard){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.isTokenOnly){\r\n\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(18));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n\r\n      }else if(farmConfig.nonStandard){\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenAltBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteAltTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteAltTokenBlanceLP).div(new BigNumber(tokenAltBalanceLP));\r\n        }\r\n\r\n      }else{\r\n\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        \r\n      }\r\n\r\n      const [info, totalAllocPoint, TINVSPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'TINVSPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        TINVSPerBlock: new BigNumber(TINVSPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}